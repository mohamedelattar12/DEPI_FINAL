{
	"info": {
		"_postman_id": "6df10505-b66f-4472-b060-a8c13e284077",
		"name": "DEPI Group 2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28579308",
		"_collection_link": "https://www.postman.com/red-zodiac-126594/workspace/automation-excercise/collection/28579308-6df10505-b66f-4472-b060-a8c13e284077?action=share&source=collection_link&creator=28579308"
	},
	"item": [
		{
			"name": "API 1: Get All Products List",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.environment.set(\"variable_key\", \"variable_value\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}productsList",
					"host": [
						"{{BaseURL}}productsList"
					]
				}
			},
			"response": []
		},
		{
			"name": "API 2: POST To All Products List",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response contains correct status and message for unsupported request method\", function () {\r",
							"    var jsonData = pm.response.json(); // Parse the response as JSON\r",
							"\r",
							"    // Check if the response code is 405\r",
							"    pm.expect(jsonData.responseCode).to.eql(405, \"Expected response code to be 405\");\r",
							"\r",
							"    // Check if the message is \"This request method is not supported.\"\r",
							"    pm.expect(jsonData.message).to.eql(\"This request method is not supported.\", \"Expected message for unsupported request method\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}productsList",
					"host": [
						"{{BaseURL}}productsList"
					]
				}
			},
			"response": []
		},
		{
			"name": "API 3: Get All Brands List",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Blue Top\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}productsList",
					"host": [
						"{{BaseURL}}productsList"
					]
				}
			},
			"response": []
		},
		{
			"name": "API 4: PUT To All Brands List",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This request method is not supported.\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains correct status and message for unsupported method\", function () {\r",
							"    var jsonData = pm.response.json(); // Parse the response as JSON\r",
							"\r",
							"    // Check if the response code is 405\r",
							"    pm.expect(jsonData.responseCode).to.eql(405, \"Expected response code to be 405\");\r",
							"\r",
							"    // Check if the message is \"This request method is not supported.\"\r",
							"    pm.expect(jsonData.message).to.eql(\"This request method is not supported.\", \"Expected message for unsupported request method\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}brandsList",
					"host": [
						"{{BaseURL}}brandsList"
					]
				}
			},
			"response": []
		},
		{
			"name": "API 5: POST To Search Product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"price\", \"Rs. 400\"& \"brand\", \"H&M\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "search_product",
							"value": "tshirt",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{BaseURL}}searchProduct",
					"host": [
						"{{BaseURL}}searchProduct"
					],
					"query": [
						{
							"key": "search_product",
							"value": "tshirt",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "API 6: POST To Search Product without search product parameter",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response contains correct status and message for bad request\", function () {\r",
							"    var jsonData = pm.response.json(); // Parse the response as JSON\r",
							"\r",
							"    // Check if the response code is 400\r",
							"    pm.expect(jsonData.responseCode).to.eql(400, \"Expected response code to be 400\");\r",
							"\r",
							"    // Check if the message is \"Bad request, search_product parameter is missing in POST request.\"\r",
							"    pm.expect(jsonData.message).to.eql(\"Bad request, search_product parameter is missing in POST request.\", \"Expected message for missing parameter\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}searchProduct",
					"host": [
						"{{BaseURL}}searchProduct"
					]
				}
			},
			"response": []
		},
		{
			"name": "API 7: POST To Verify Login with valid details",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response contains correct status and message for user\", function () {\r",
							"    var jsonData = pm.response.json(); // Parse the response as JSON\r",
							"\r",
							"    // Check if the response code is either 200 or 404\r",
							"    pm.expect(jsonData.responseCode).to.be.oneOf([200, 404], \"Expected response code to be 200 or 404\");\r",
							"\r",
							"    // Check the message based on the response code\r",
							"    if (jsonData.responseCode === 200) {\r",
							"        pm.expect(jsonData.message).to.eql(\"User exists!\", \"Expected message for existing user\");\r",
							"    } else if (jsonData.responseCode === 404) {\r",
							"        pm.expect(jsonData.message).to.eql(\"User not found!\", \"Expected message for user not found\");\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "email",
							"value": "{{email}}",
							"type": "text"
						},
						{
							"key": "password",
							"value": "{{password}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{BaseURL}}verifyLogin",
					"host": [
						"{{BaseURL}}verifyLogin"
					]
				}
			},
			"response": []
		},
		{
			"name": "API 8: POST To Verify Login without email parameter",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response contains correct status and message for missing email or password\", function () {\r",
							"    var jsonData = pm.response.json(); // Parse the response as JSON\r",
							"\r",
							"    // Check if the response code is 400\r",
							"    pm.expect(jsonData.responseCode).to.eql(400, \"Expected response code to be 400\");\r",
							"\r",
							"    // Check if the message is \"Bad request, email or password parameter is missing in POST request.\"\r",
							"    pm.expect(jsonData.message).to.eql(\"Bad request, email or password parameter is missing in POST request.\", \"Expected message for missing email or password\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{BaseURL}}verifyLogin",
					"host": [
						"{{BaseURL}}verifyLogin"
					]
				}
			},
			"response": []
		},
		{
			"name": "API 9: DELETE To Verify Login without send email and password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response contains correct status and message for unsupported request method\", function () {\r",
							"    var jsonData = pm.response.json(); // Parse the response as JSON\r",
							"\r",
							"    // Check if the response code is 405\r",
							"    pm.expect(jsonData.responseCode).to.eql(405, \"Expected response code to be 405\");\r",
							"\r",
							"    // Check if the message is \"This request method is not supported.\"\r",
							"    pm.expect(jsonData.message).to.eql(\"This request method is not supported.\", \"Expected message for unsupported request method\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}verifyLogin",
					"host": [
						"{{BaseURL}}verifyLogin"
					]
				}
			},
			"response": []
		},
		{
			"name": "API 10: POST To Create/Register User Account",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains correct status and message\", function () {\r",
							"    var jsonData = pm.response.json(); // Parse the response as JSON\r",
							"\r",
							"    // Check if the response code is either 200 or 400\r",
							"    pm.expect(jsonData.responseCode).to.be.oneOf([201, 400]);\r",
							"\r",
							"    // Check the message based on the response code\r",
							"    if (jsonData.responseCode === 201) {\r",
							"        pm.expect(jsonData.message).to.eql(\"User created!\", \"Expected message for successful user creation\");\r",
							"    } else if (jsonData.responseCode === 400) {\r",
							"        pm.expect(jsonData.message).to.eql(\"Email already exists!\", \"Expected message for duplicate email error\");\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "email",
							"value": "{{email}}",
							"type": "text"
						},
						{
							"key": "password",
							"value": "{{password}}",
							"type": "text"
						},
						{
							"key": "birth_date",
							"value": "4",
							"type": "text"
						},
						{
							"key": "birth_month",
							"value": "10",
							"type": "text"
						},
						{
							"key": "birth_year",
							"value": "1986",
							"type": "text"
						},
						{
							"key": "firstname",
							"value": "Mariam",
							"type": "text"
						},
						{
							"key": "lastname",
							"value": "Beshara",
							"type": "text"
						},
						{
							"key": "company",
							"value": "DEPI",
							"type": "text"
						},
						{
							"key": "address1",
							"value": "Alex",
							"type": "text"
						},
						{
							"key": "address2",
							"value": "Alex",
							"type": "text"
						},
						{
							"key": "country",
							"value": "Canada ",
							"type": "text"
						},
						{
							"key": "zipcode",
							"value": "1234569",
							"type": "text"
						},
						{
							"key": "state",
							"value": "Alex",
							"type": "text"
						},
						{
							"key": "city",
							"value": "Alexx",
							"type": "text"
						},
						{
							"key": "mobile_number",
							"value": "123654855",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{BaseURL}}createAccount",
					"host": [
						"{{BaseURL}}createAccount"
					]
				}
			},
			"response": []
		},
		{
			"name": "API 11: POST To Create/Register User Account With Exist Email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response contains correct status and message\", function () {\r",
							"    var jsonData = pm.response.json(); // Parse the response as JSON\r",
							"\r",
							"    // Check if the response code is either 200 or 400\r",
							"    pm.expect(jsonData.responseCode).to.be.oneOf([201, 400]);\r",
							"\r",
							"    // Check the message based on the response code\r",
							"    if (jsonData.responseCode === 201) {\r",
							"        pm.expect(jsonData.message).to.eql(\"User created!\", \"Expected message for successful user creation\");\r",
							"    } else if (jsonData.responseCode === 400) {\r",
							"        pm.expect(jsonData.message).to.eql(\"Email already exists!\", \"Expected message for duplicate email error\");\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "email",
							"value": "{{email}}",
							"type": "text"
						},
						{
							"key": "password",
							"value": "{{password}}",
							"type": "text"
						},
						{
							"key": "birth_date",
							"value": "5",
							"type": "text"
						},
						{
							"key": "birth_month",
							"value": "10",
							"type": "text"
						},
						{
							"key": "birth_year",
							"value": "1986",
							"type": "text"
						},
						{
							"key": "firstname",
							"value": "Mariam",
							"type": "text"
						},
						{
							"key": "lastname",
							"value": "Beshara",
							"type": "text"
						},
						{
							"key": "company",
							"value": "DEPI",
							"type": "text"
						},
						{
							"key": "address1",
							"value": "Alex",
							"type": "text"
						},
						{
							"key": "address2",
							"value": "Alex",
							"type": "text"
						},
						{
							"key": "country",
							"value": "Canada ",
							"type": "text"
						},
						{
							"key": "zipcode",
							"value": "1234569",
							"type": "text"
						},
						{
							"key": "state",
							"value": "Alex",
							"type": "text"
						},
						{
							"key": "city",
							"value": "Alexx",
							"type": "text"
						},
						{
							"key": "mobile_number",
							"value": "123654855number",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{BaseURL}}createAccount",
					"host": [
						"{{BaseURL}}createAccount"
					]
				}
			},
			"response": []
		},
		{
			"name": "API 12: POST To Verify Login with invalid details",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response contains correct status and message\", function () {\r",
							"    var jsonData = pm.response.json(); // Parse the response as JSON\r",
							"\r",
							"    // Log the response for debugging\r",
							"    console.log(jsonData);\r",
							"\r",
							"    // Check if the response code is either 200 or 404\r",
							"    pm.expect(jsonData.responseCode).to.be.oneOf([200, 404], \"Response code should be either 200 or 404\");\r",
							"\r",
							"    // Check the message based on the response code\r",
							"    if (jsonData.responseCode === 200) {\r",
							"        pm.expect(jsonData.message).to.eql(\"User exists!\", \"Expected message for existing user\");\r",
							"    } else if (jsonData.responseCode === 404) {\r",
							"        pm.expect(jsonData.message).to.eql(\"User not found!\", \"Expected message for non-existing user\");\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "email",
							"value": "{{email}}",
							"type": "text"
						},
						{
							"key": "password",
							"value": "{{password}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{BaseURL}}verifyLogin",
					"host": [
						"{{BaseURL}}verifyLogin"
					]
				}
			},
			"response": []
		},
		{
			"name": "API 13: PUT METHOD To Update User Account",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response contains correct status and message\", function () {\r",
							"    var jsonData = pm.response.json(); // Parse the response as JSON\r",
							"\r",
							"    // Check if the response code is either 200 or 404\r",
							"    pm.expect(jsonData.responseCode).to.be.oneOf([200, 404], \"Expected response code to be 200 or 404\");\r",
							"\r",
							"    // Check the message based on the response code\r",
							"    if (jsonData.responseCode === 200) {\r",
							"        pm.expect(jsonData.message).to.eql(\"User updated!\", \"Expected message for user updated\");\r",
							"    } else if (jsonData.responseCode === 404) {\r",
							"        pm.expect(jsonData.message).to.eql(\"Account not found!\", \"Expected message for account not found\");\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "email",
							"value": "{{email}}",
							"type": "text"
						},
						{
							"key": "password",
							"value": "{{password}}",
							"type": "text"
						},
						{
							"key": "birth_date",
							"value": "5",
							"type": "text"
						},
						{
							"key": "birth_month",
							"value": "10",
							"type": "text"
						},
						{
							"key": "birth_year",
							"value": "1986",
							"type": "text"
						},
						{
							"key": "firstname",
							"value": "Mariam",
							"type": "text"
						},
						{
							"key": "lastname",
							"value": "Beshara",
							"type": "text"
						},
						{
							"key": "company",
							"value": "DEPI",
							"type": "text"
						},
						{
							"key": "address1",
							"value": "Alex",
							"type": "text"
						},
						{
							"key": "address2",
							"value": "Alex",
							"type": "text"
						},
						{
							"key": "country",
							"value": "Canada ",
							"type": "text"
						},
						{
							"key": "zipcode",
							"value": "1234569",
							"type": "text"
						},
						{
							"key": "state",
							"value": "Alex",
							"type": "text"
						},
						{
							"key": "city",
							"value": "Alexx",
							"type": "text"
						},
						{
							"key": "mobile_number",
							"value": "123654855number",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{BaseURL}}updateAccount",
					"host": [
						"{{BaseURL}}updateAccount"
					]
				}
			},
			"response": []
		},
		{
			"name": "API 14: GET user account detail by email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Fixed syntax error by removing redundant test call\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains correct status and message\", function () {\r",
							"    var jsonData = pm.response.json(); // Parse the response as JSON\r",
							"\r",
							"    // Check if the response code is either 200 or 404\r",
							"    pm.expect(jsonData.responseCode).to.be.oneOf([200, 404]);\r",
							"\r",
							"    // Check the content based on the response code\r",
							"    if (jsonData.responseCode === 200) {\r",
							"        // Check if the \"name\" field exists inside the \"user\" object and is equal to \"Mariam\"\r",
							"        pm.expect(jsonData.user).to.have.property(\"name\"); // Ensure the \"name\" field exists within \"user\"\r",
							"        pm.expect(jsonData.user.name).to.eql(\"Mariam\");\r",
							"    } else if (jsonData.responseCode === 404) {\r",
							"        // Check if the message is \"Account not found with this email, try another email!\"\r",
							"        pm.expect(jsonData.message).to.eql(\"Account not found with this email, try another email!\");\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}getUserDetailByEmail?email={{email}}",
					"host": [
						"{{BaseURL}}getUserDetailByEmail"
					],
					"query": [
						{
							"key": "email",
							"value": "{{email}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "API 15: DELETE METHOD To Delete User Account",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains correct status and message\", function () {\r",
							"    var jsonData = pm.response.json(); // Parse the response as JSON\r",
							"\r",
							"    // Check if the response code is either 200 or 404\r",
							"    pm.expect(jsonData.responseCode).to.be.oneOf([200, 404]);\r",
							"\r",
							"    // Check the message based on the response code\r",
							"    if (jsonData.responseCode === 200) {\r",
							"        pm.expect(jsonData.message).to.eql(\"Account deleted!\");\r",
							"    } else if (jsonData.responseCode === 404) {\r",
							"        pm.expect(jsonData.message).to.eql(\"Account not found!\");\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "email",
							"value": "{{email}}",
							"type": "text"
						},
						{
							"key": "password",
							"value": "{{password}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{BaseURL}}deleteAccount",
					"host": [
						"{{BaseURL}}deleteAccount"
					]
				}
			},
			"response": []
		}
	]
}